load("installr")
load(installr)
install.packages(installr)
install.packages(Installr)
install.packages("installr")
load(installr)
load("installr")
load('installr')
setwd("~/TO 414/R")
getwd()
installr
load(installr)
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
ahmad <- "eats booty"
ahmad
"gets booty eaten" >- ahmad
del(ahmad)
remove(ahmad)
install.packages(skkkrah)
install.packages("skrrrah")
install.packages(skrrrahh)
install.packages("skrrrahh")
library(skrrrahh)
boys <- c("Ahmad", "Joel", "Adam")
girls <- c("Daria", "Elizabeth", "Elanor")
boysontop = matrix(boys, girls)
boysontop <- data.frame(boys, girls)
boysontop
remove(boysontop)
rbind(boys, girls)
boysontop <- rbind(boys, girls)
print(boysontop)
girlsontop <- rbind(boys, girls)
girlsontop <- rbind(girls, boys)
girlsontop
remove(boysontop)
remove(girlsontop)
remove(boys)
remove(girls)
#vectors are formed as follows
vector = c(1, 2, 3, 4)
print(vector)
vector <- c(1,2,3,4)
vector = true
vector = TRUE
vector <- true
vector = 2
remove(vector)
x = 10
x = x + 1
TRUE = FALSE
x = TRUE
y = FALSE
x = y
remove(x)
remove(y)
13/2
y = 13/2
y
y = 150000013/2
y
x = 150000013/2.0
x
thingsahmadlikes <- c()
thingsahmadlikes <- c("Adam")
thingsahmadlikes <- c(thingsahmadlikes, "lightsabers")
thingsahmadlikes
remove(x, y, thingsahmadlikes)
PI
?order()
library("dplyr", lib.loc="~/R/win-library/3.5")
install.packages(c("callr", "digest", "fansi", "pkgconfig", "processx", "rlang", "stringi", "tinytex"))
library(dplyr)
detach(dplyr)
detach(dplyr:)
example("barplot")
example("regression")
seq(1, 10, 0.1)
seq(1, 5000000, 69)
seq(0, 5000000, 69)
remove(hh, r, mp)
remove(mybarcol, Ni, tN, tot)
install.packages("installr")
version
updateR()
library(installr)
updateR()
list.files()
list.files(getwd())
getwd
x = getwd
list.files(getwd)
remove(x)
getwd()
wd = getwd()
list.files(wd)
x <- list.files(wd)
class(x)
type(wd)
str(x)
type(x)
q <- read.csv(x)
q
summary(q)
str(q)
q$origin
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
str(q)
q
head(q)
factor(q$year)
q
str(pressure)
head(q)
plot(pressure)
y <- remove(q$year)
df <- data.frame()
cbind.data.frame(df, q$X)
df <- cbind.data.frame(q$X)
df <- cbind.data.frame(c(df, q$day, q$dep_time, q$dep_delay, q$arr_time, q$arr_delay, q$carrier, q$tailnum, q$flight, q$origin, q$dest, q$air_time, q$distance, q$hour, q$minute))
q[5,]
q[,5]
h <- cbind(q[,3:16])
h
q
cbind(q[,c(1:17)])
newdf <- cbind(q[,c(1, 4:17)])
newdf
headnewdf
head(newdf)
head(q)
q <- q[, -c(2,3)]
head(q)
AdhmadLiftsToday <- TRUE
AhmadLiftsToday
group <- C(1, 2, 3, 4)
group <- c(1, 2, 3, 4)
str(group)
class(group)
group <- factor(group)
class(group)
levels(group)
rm(df)
rm(h
)
gender <- c(1,2,1,1,2,2,1,1)
),
age <- c(17, 19, 21, 22, 18, 23, 17, 18)
score <- c(98, 88, 70, 54, 76, 92, 67, 44)
gender <- c(1, 2, 1, 1, 2, 2, 1, 1); gender <- as.factor(gender)
levels(gender) <- c("male", "female")
combineddata <- data.frame(age, gender, score); combineddata
rm(score, age, gender) #Removing previous data
combineddata$score #accessing components of a data frame
names(combineddata) #Find names of data frame constituents
str(combineddata) #Find structure of the data frame
combineddata$score > 75
age <- c(17, 19, 21, 22, 18, 23, 17, 18)
score <- c(98, 88, 70, 54, 76, 92, 67, 44)
gender <- c(1, 2, 1, 1, 2, 2, 1, 1); gender <- as.factor(gender)
levels(gender) <- c("male", "female")
combineddata <- data.frame(age, gender, score); combineddata
rm(score, age, gender) #Removing previous data
combineddata$score #accessing components of a data frame
names(combineddata) #Find names of data frame constituents
str(combineddata) #Find structure of the data frame
combineddata[combineddata$score > 75,]
nrow(combineddata[combineddata$score > 75,])
nyc <- read.csv("nycflightsjan13.csv")
nyc <- read.csv("nycflightsjan13.csv")
head(nyc)
tail(nyc)
print("Head")
head(nyc)
print("Tail")
tail(nyc)
print("Head")
print(head(nyc))
print("Tail")
print(tail(nyc))
nrow(nyc)
ncol(nyc)
print("Head")
head(nyc)
print("Tail")
tail(nyc)
colnames(nyc)
nyc$arr_delay
usefuldelays <- na.omit(nyc$arr_delay)
usefuldelays
usefuldelays
usefuldelays <- na.omit(nyc$arr_delay)
sum(usefuldelays)
class(usefuldelays)
str(usefuldelays)
mean(usefuldelays)
mean(nyc$arr_delay, na.rm = T)
hist(nyc$arr_delay, na.rm = T)
hist(nyc$arr_delay)
?tapply
colnames(nyc)
nyc$carrier
uniqueairline <- unique(nyc$carrier)
uniqueairline
x <-subset(nyc, nyc$origin == "NYC"), na.rm = T)
x <-subset(nyc, nyc$origin == "NYC")
colnames(x)
rbind(x, mean(x$air_time = "mean"))
cbind(x, mean(x$air_time = "mean"))
nyc[order(nyc$arr_delay, decreasing = TRUE),] # Default Ascending, how to do descending?
asdg
somedata <- c(10.4, 9.8, 5.6, 4,9, 2,4, 3.1, 7.2, 6.4, 8.8, 12.5, 21.7)
somedata[5]
somedata[-5]
length(somedata)
max(somedata)-min(somedata)
greaterthanten <- somedata > 10
somedata[greaterthanten]
any(somedata==7.2)
student.state <- c("MI", "IL", "NY", "MI", "NY", "HI", "IL", "MI", "MI", "NY")
as.factor(student.state)
student.state.factor <- as.factor(student.state)
levels(student.state.factor)
str(student.state.factor)
str(student.state.factor)
summary(student.state.factor)
str(student.state.factor)
summary(student.state.factor)
length(student.state.factor)
str(student.state.factor)
summary(student.state.factor)
length(student.state.factor)
count(student.state.factor)
str(student.state.factor)
summary(student.state.factor)
n(student.state.factor)
str(student.state.factor)
summary(student.state.factor)
student.state
# HI
# Write code below to import nycflightsjan13 dataset into an object named nyc
nyc <- read.csv("nycflightsjan13.csv")
print("Str")
str(nyc)
print("Summary")
summary(nyc)
nrow(subset(nyc, nyc$carrier == "UA" & nyc$day == 12 ))
#Average delay
avgdelay <- mean(nyc$arr_delay, na.rm = TRUE)
avgdelay
#Average delay
avgdelay <- mean(nyc$arr_delay, na.rm = TRUE)
avgdelay
#Maximum arrival delay
mad <- max(nyc$arr_delay)
mad
#Average delay
avgdelay <- mean(nyc$arr_delay, na.rm = TRUE)
avgdelay
#Maximum arrival delay
mad <- max(nyc$arr_delay, na.rm = TRUE)
mad
#Average delay
avgdelay <- mean(nyc$arr_delay, na.rm = TRUE)
avgdelay
#Maximum arrival delay
mad <- max(nyc$arr_delay, na.rm = TRUE)
mad
#median
median <- median(nyc$arr_delay, na.rm = TRUE)
#Average delay
avgdelay <- mean(nyc$arr_delay, na.rm = TRUE)
avgdelay
#Maximum arrival delay
mad <- max(nyc$arr_delay, na.rm = TRUE)
mad
#median
median <- median(nyc$arr_delay, na.rm = TRUE)
median
airlinefactor <- as.factor(nyc$carrier)
tapply(airlinefactor, airlinefactor, mean, na.rm = TRUE)
tapply(airlinefactor,[,1] , mean, na.rm = TRUE)
tapply(airlinefactor,airlinefactor[,1] , mean, na.rm = TRUE)
tapply(airlinefactor,airlinefactor , mean, na.rm = TRUE)
tapply(nyc,nyc$carrier , mean, na.rm = TRUE)
tapply(nyc, nyc$carrier , mean, na.rm = TRUE)
tapply(nyc, nyc$carrier, mean, na.rm = TRUE)
tapply(nyc$arr_delay, nyc$carrier, mean, na.rm = TRUE)
delaybyairline <- tapply(nyc$arr_delay, nyc$carrier, mean, na.rm = TRUE)
delaybyairline
barplot(delaybyairline)
barplot(delaybyairline, main = "Delays by Airline")
barplot(delaybyairline, main = "Delays by Airline", xlim = 15)
barplot(delaybyairline, main = "Delays by Airline")
barplot(delaybyairline, main = "Delays by Airline", cex.axis = .8)
barplot(delaybyairline, main = "Delays by Airline", cex.axis = .5)
barplot(delaybyairline, main = "Delays by Airline")
barplot(delaybyairline, main = "Delays by Airline", names.arg = names(delaybyairline))
barplot(delaybyairline, main = "Delays by Airline", cex.names = 0.5)
barplot(delaybyairline, main = "Delays by Airline", cex.names = 0.7)
#Highest Delay
delaybyairline[delaybyairline == max(delaybyairline)]
#Highest Delay
delaybyairline[delaybyairline == max(delaybyairline)]
#lowestdelay
delaybyairline[delaybyairline == min(delaybyairline)]
#Highest Delay
names(delaybyairline[delaybyairline == max(delaybyairline)])
#lowestdelay
names(delaybyairline[delaybyairline == min(delaybyairline)])
#Highest Delay
names(delaybyairline[delaybyairline == max(delaybyairline)])
#lowestdelay
names(delaybyairline[delaybyairline == min(delaybyairline)])
#Negative?
any(delaybyairline < 0, TRUE)
str(student.state.factor)
summary(student.state.factor)
match(student.factor, "HI")
str(student.state.factor)
summary(student.state.factor)
match(student.state, "HI")
# HI
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state, "HI"))
# HI
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state, "HI"), na.rm = TRUE)
# HI
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,levels(student.state.factor)), na.rm = TRUE) == 1
# HI
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,levels(student.state.factor)), na.rm = TRUE) == 1
tapply(student.state, levels(student.state.factor, length)
# HI
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,levels(student.state.factor)), na.rm = TRUE) == 1
tapply(student.state, levels(student.state.factor), length)
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,levels(student.state.factor)), na.rm = TRUE) == 1
nlevels(student.state.factor)
# HI
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,c("MI", "HI"), na.rm = TRUE) == 1
# HI
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,c("MI", "HI"), na.rm = TRUE) == 1
table(student.state.factor)
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,c("MI", "HI"), na.rm = TRUE) == 1
table(student.state)
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,c("MI", "HI"), na.rm = TRUE) == 1
duplicated(student.state)
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,c("MI", "HI"), na.rm = TRUE) == 1
duplicated(student.state.factor)
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,c("MI", "HI"), na.rm = TRUE) == 1
duplicated(student.state.factor)
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,c("MI", "HI"), na.rm = TRUE) == 1
duplicated(student.state.factor)
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,c("MI", "HI"), na.rm = TRUE) == 1
duplicated(student.state.factor)
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,c("MI", "HI"), na.rm = TRUE) == 1
duplicated(student.state.factor)
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,c("MI", "HI"), na.rm = TRUE) == 1
duplicated(student.state.factor)
student.state
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,c("MI", "HI"), na.rm = TRUE) == 1
duplicated(student.state.factor)
# NOT RUN {
x <- c(9:20, 1:5, 3:7, 0:8)
## extract unique elements
(xu <- x[!duplicated(x)])
str(student.state.factor)
summary(student.state.factor)
sum(match(student.state.factor,c("MI", "HI"), na.rm = TRUE) == 1
once <- student.state.factor[!duplicated(student.state.factor)]
str(student.state.factor)
summary(student.state.factor)
once <- student.state.factor[!duplicated(student.state.factor)]
student.state
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state.factor[!duplicated(student.state.factor)]
student.state
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state[!duplicated(student.state)]
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state[!duplicated(student.state)]
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state[!duplicated(unique(student.state))]
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state[!duplicated(unique(student.state))]
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- levels(student.state.factor[!duplicated(unique(student.state))])
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state[!duplicated(student.state)]
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state[duplicated(student.state)]
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state[-duplicated(student.state)]
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state[!duplicated(student.state)]
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state[duplicated(student.state)]
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state.factor[duplicated(student.state.factor)]
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state.factor[duplicated(student.state.factor)]
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state[duplicated(student.state)]
once
# HI
str(student.state.factor)
summary(student.state.factor)
once <- student.state[duplicated(student.state)]
student.state[!=once]
str(student.state.factor)
summary(student.state.factor)
once <- student.state[duplicated(student.state)]
student.state[student.state!=once]
# HI
str(student.state.factor)
once <- summary(student.state.factor)
# HI
str(student.state.factor)
once <- summary(student.state.factor)
once
# HI
once
str(student.state.factor)
once <- summary(student.state.factor)
names(once == 1)
# HI
once
once[once == 1]
str(student.state.factor)
once <- summary(student.state.factor)
names(once[once == 1])
# HI
